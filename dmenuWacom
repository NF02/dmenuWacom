#!/bin/env zsh
# author: NFVblog
PAD=`xsetwacom --list devices | awk '/PAD/||/pad/||/Pad/' | awk -F "id:" '{print $1}' | cut -d " " -f1-8  | sed -e 's/[[:space:]]*$//'`

if [[ $1 == --version ]] || [[ $1 == -v ]] || [[ $1 == -VERSION ]]; then
	cat << 'EOF'
DMWacom 0.2 beta
EOF
	exit 0
fi

if [[ $PAD == "" ]]; then
	notify-send "ðŸ’€ pad not found"
	exit 1
fi
ScreenLocking(){
	if [[ $PAD != "Wacom Intuos S Pad pad" ]] && [[ $PAD != "Wacom Intuos M Pad pad" ]];then
		notify-send "ðŸ’€ pad not support"
		exit 1
	fi
	app="DVI-D-0\nHDMI-A-2\n"
	launcher_app=$(echo -e "$app" | dmenu -i -p "Select dislay: ")
	case $launcher_app in
		"HDMI-A-2") xinput map-to-output 'Wacom Intuos S Pen stylus' HDMI-A-2;;
		"DVI-D-0")  xinput map-to-output 'Wacom Intuos S Pen stylus' DVI-D-0;;
	esac
}
Applications_profiles() {
	if [[ $PAD != "Wacom Intuos S Pad pad" ]] && [[ $PAD != "Wacom Intuos M Pad pad" ]] && [[ $PAD != "TABLET Pen Tablet Pad pad" ]];then
		notify-send "ðŸ’€ pad not support"
		exit 1
	fi
	app="Krita\nGimp\nInkscape\nOlive Video Editor\n"
	launcher_app=$(echo -e "$app" | dmenu -i -p "Applications profiles: ")
	case $launcher_app in
		"Krita")
			xsetwacom set "$PAD" Button 1 key b &&
			xsetwacom set "$PAD" Button 2 key f &&
			xsetwacom set "$PAD" Button 3 key +ctrl t -ctrl &&
			xsetwacom set "$PAD" Button 8 key +ctrl z -ctrl &&
			krita & notify-send "ï—® $launcher_app app. profile"
		;;
		"Gimp")
			xsetwacom set "$PAD" Button 1 key p &&
			xsetwacom set "$PAD" Button 2 key r &&
			xsetwacom set "$PAD" Button 3 key +shift e -shift &&
			xsetwacom set "$PAD" Button 8 key +ctrl z -ctrl &&
			gimp & notify-send "ï—® $launcher_app app. profile"
		;;
		"Inkscape")
			xsetwacom set "$PAD" Button 1 key b &&
			xsetwacom set "$PAD" Button 2 key +shift e -shift &&
			xsetwacom set "$PAD" Button 3 key c &&
			xsetwacom set "$PAD" Button 8 key +ctrl z -ctrl &&
			inkscape & notify-send "ï—® $launcher_app app. profile"
		;;
		"Olive Video Editor")
			xsetwacom set "$PAD" Button 1 key v &&
			xsetwacom set "$PAD" Button 2 key x &&
			xsetwacom set "$PAD" Button 3 key c &&
			xsetwacom set "$PAD" Button 8 key h &&
		 	olive-editor & notify-send "ï—® $launcher_app app. profile"
		;;

	esac
}

Button_setting() {
	nbut=`xsetwacom -s get "$PAD" all | grep "Button" | wc -l`

	for number in {1..$nbut}
	do
		#echo "$number "
		buttons+="$number\n"
	done
	#buttons="1\n2\n3\n4\n"
	launcher_button=$(echo -e "$buttons" | dmenu -i -p "Button: ")
	if [[ $launcher_button > "3" ]]; then
		launcher_button=$(echo "$launcher_button+4" | bc)
		Button_set $launcher_button
	else if [[ $launcher_button < $nbut ]]; then
			Button_set $launcher_button
		fi
	fi

}

Button_set(){
	if [[ $1 > "7" ]]; then
		nbut=$(echo "$1-4" | bc)
		launcher_but=$(echo -e "" | dmenu -i -p "Function $nbut: ")
	else launcher_but=$(echo -e "" | dmenu -i -p "Function $1: ")
	fi
	xsetwacom set "$PAD" Button $1 key $launcher_but
}

Info_tablet(){
	notify-send "ï„Š $PAD"

}

# launcher
wacom="Button setting\nApplications profiles\nScreen Locking\nInfo\nManual\n"
launcher_wacom=$(echo -e "$wacom" | dmenu -i -p "dmenuWacom")
[[ "$launcher_wacom" = "" ]] && exit 1

case $launcher_wacom in
	"Button setting") Button_setting;;
	"Applications profiles") Applications_profiles;;
	"Screen Locking") ScreenLocking;;
	"Info") Info_tablet;;
	"Manual") st -e man dmenuWacom;;
esac

